# This workflow builds a Windows executable for the Sorting Hat app using Python 3.13.
name: Build Sorting Hat Executable
#
on:
  push:
    branches: [ up1 ]
    paths:
      # Trigger on changes to any Python file, assets, or configs
      - '**.py'
      - '**.gif'
      - '**.json'
      - '**.mp3'
      - '**.png'
      - 'requirements.txt'
      - '.github/workflows/main.yml'
  # Allow manual triggering from the Actions tab
  workflow_dispatch:

jobs:
  build-windows:
    name: Build for Windows
    runs-on: windows-latest

    steps:
      # --- Step 1: Get the code ---
      - name: Checkout code
        uses: actions/checkout@v4

      # --- Step 2: Set up a clean Python environment ---
      - name: Set up Python 3.13.5
        uses: actions/setup-python@v5
        with:
          python-version: '3.13.5'
          # THE CACHE IS INTENTIONALLY DISABLED to prevent a corrupted state.
          # This guarantees a clean, reproducible build every time.

      # --- Step 3: Install pinned Python dependencies ---
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        shell: pwsh

      # --- Step 4: Generate the base .spec file (with hidden import fix) ---
      - name: Generate PyInstaller Spec File
        run: |
          pyi-makespec --onedir --windowed --name SortingHatApp `
            --add-data "hat.gif;." `
            --add-data "hat_think.gif;." `
            --add-data "settings.json;." `
            --add-data "sortinghat_music.mp3;." `
            --hidden-import=scipy._cyutility `
            sorting_hat_app.py
        shell: pwsh

      # --- Step 5: Modify .spec to Exclude pwdeep.py ---
      - name: Modify Spec File to Exclude Module
        run: |
          # This step is crucial. It tells PyInstaller NOT to bundle pwdeep.py.
          # We replace the default empty excludes list with our target module.
          (Get-Content -Path SortingHatApp.spec) -replace 'excludes=\[\]', "excludes=['pwdeep']" | Set-Content -Path SortingHatApp.spec
        shell: pwsh

      # --- Step 6: Build the executable from the modified .spec file ---
      - name: Build executable from Spec File
        run: pyinstaller --noconfirm --clean SortingHatApp.spec
        shell: pwsh

      # --- Step 7: Prepare and Upload the Release Artifact ---
      - name: Prepare Release Artifact
        shell: pwsh
        run: |
          # We are now packaging the entire output directory from dist/.
          # This folder contains the .exe and all its dependencies.
          mkdir release
          Copy-Item -Path dist/SortingHatApp -Destination release/ -Recurse
          
      - name: Upload Release Artifact
        uses: actions/upload-artifact@v4
        with:
          name: SortingHat-Windows-Release
          path: release/SortingHatApp/