# GitHub Actions Workflow to build the AI Sorting Hat for Windows
# This workflow compiles the Python application into a single .exe file.

name: Build Sorting Hat Windows EXE

# Triggers the workflow on push to main or manual dispatch
on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-windows:
    # Use the latest Windows runner
    runs-on: windows-latest

    steps:
      # Step 1: Get the code from the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up a Python 3.11 environment
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      # Step 3: Install all Python dependencies from the pinned requirements file
      - name: Install Python dependencies
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          echo "Clearing pip cache to ensure a clean install..."
          python -m pip cache purge
          echo "Installing pinned dependencies from requirements.txt..."
          pip install -r requirements.txt

      # Step 4: Compile the application into a single .exe using Nuitka
      - name: Compile Application with Nuitka
        shell: pwsh
        run: |
          python -m nuitka `
            --onefile `
            --windows-disable-console `
            --enable-plugin=pyside6 `
            --enable-plugin=pyttsx3 `
            --enable-plugin=numpy `
            --output-dir=dist `
            --no-follow-import-to=pwdeep `
            --include-data-file="hat.gif=hat.gif" `
            --include-data-file="hat_think.gif=hat_think.gif" `
            --include-data-file="settings.json=settings.json" `
            --include-data-file="sortinghat_music.mp3=sortinghat_music.mp3" `
            --include-data-file="volume_on.png=volume_on.png" `
            --include-data-file="volume_off.png=volume_off.png" `
            sorting_hat_app.py

      # Step 5: Organize files for the downloadable artifact
      - name: Prepare Release Artifact
        shell: pwsh
        run: |
          mkdir release
          copy dist\sorting_hat_app.exe release\
          copy pwdeep.py release\
          
      # Step 6: Upload the final .zip containing the .exe and pwdeep.py
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Sorting-Hat-Windows
          path: release/